<?php

/**
 * @file
 * Functions to support theming in the sutrix theme.
 */
use \Drupal\Core\Menu\MenuLinkTree;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function sutrix_preprocess_html(array &$variables) {
  $variables['tempale_root'] = drupal_get_path('theme', 'sutrix');
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');
  // Don't display the site name twice on the front page (and potentially others)
  /* if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
    } */
}

/**
 * Implements hook_page_attachments_alter().
 */
function sutrix_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /* $ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
    ];
    $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge']; */
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function sutrix_preprocess_page(array &$variables) {
  $variables['tempale_root'] = drupal_get_path('theme', 'sutrix');
  $block = !empty(\Drupal\block\Entity\Block::load('blockcustom')) ? \Drupal\block\Entity\Block::load('blockcustom') : "";
  $blockabout = !empty(\Drupal\block\Entity\Block::load('blockabout')) ? \Drupal\block\Entity\Block::load('blockabout') : "";
  $blockservice = !empty(\Drupal\block\Entity\Block::load('blockservice')) ? \Drupal\block\Entity\Block::load('blockservice') : "";
  $blockclient = !empty(\Drupal\block\Entity\Block::load('blockclien')) ? \Drupal\block\Entity\Block::load('blockclien') : "";
  $blockexpertise = !empty(\Drupal\block\Entity\Block::load('views_block__expertise_block_1')) ? \Drupal\block\Entity\Block::load('views_block__expertise_block_1') : "";

  if ($block) {
    $block_content = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($block);
  }
  else {
    $block_content = "";
  }
  if ($blockabout) {
    $blockabout_content = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($blockabout);
  }
  else {
    $blockabout_content = "";
  }

  if ($blockservice) {
    $blockabout_service = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($blockservice);
  }
  else {
    $blockabout_service = "";
  }
  if ($blockclient) {
    $block_client = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($blockclient);
  }
  else {
    $block_client = "";
  }
  if ($blockexpertise) {
    $block_expertise = \Drupal::entityManager()
            ->getViewBuilder('block')
            ->view($blockexpertise);
  }
  else {
    $block_expertise = "";
  }
  $variables['form_contact'] = \Drupal::formBuilder()->getForm('\Drupal\block_custom\Form\Contactus');
  $variables['block_one'] = $block_content;
  $variables['block_two'] = $blockabout_content;
  $variables['block_three'] = $blockabout_service;
  $variables['block_four'] = $block_client;
  $variables['block_five'] = $block_expertise;


  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main-123';

// Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

// Load the tree based on this set of parameters.
  $tree = $menu_tree->load($menu_name, $parameters);

// Transform the tree using the manipulators you want.
  $manipulators = array(
      // Only show links that are accessible for the current user.
      array('callable' => 'menu.default_tree_manipulators:checkAccess'),
      // Use the default sorting of menu links.
      array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

// Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  $menu_html = drupal_render($menu);
  $variables['main_menu'] = $menu_html; // menu_navigation_links();
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function sutrix_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function sutrix_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /* $node = $variables['elements']['#node'];

    if ($variables['elements']['#view_mode'] == "full") {

    } */
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function sutrix_preprocess_block(array &$variables) {
  
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function sutrix_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /* $element = $variables['element'];
    $suggestions[] = 'field__' . $element['#view_mode'];
    $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name']; */
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function sutrix_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /* $element = $variables['element'];
    if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
    } */
}

/**
 * Implements hook_preprocess_node().
 */
function sutrix_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function sutrix_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  
}

/**
 * Implements hook_preprocess_form().
 */
function sutrix_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
  $a = 123;
}

/**
 * Implements hook_preprocess_select().
 */
function sutrix_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function sutrix_preprocess_views_view_fields(array &$variables) {
  
}

/**
 * Implements hook_preprocess_field().
 */
function sutrix_preprocess_field(array &$variables, $hook) {
  /* switch ($variables['element']['#field_name']) {
    } */
}

/**
 * Implements hook_preprocess_details().
 */
function sutrix_preprocess_details(array &$variables) {
  /* $variables['attributes']['class'][] = 'details';
    $variables['summary_attributes']['class'] = 'summary'; */
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function sutrix_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function sutrix_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
